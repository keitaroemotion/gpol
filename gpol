#!/usr/bin/env python

from github   import Github
from datetime import datetime, date, timedelta
import re
import sys

TOKEN_PATH=".token"

#
# usage:
#
# police -o myorg -u john -d 20191113-20191115
#
# * basically this script checks all repo related to a user

organization_name = None
user_name         = None
date_from         = None
date_to           = None

def alert(msg):
    print(msg)
    sys.exit()

def empty(value):
    return (value == "") or (value == None)

i = 0
for arg in sys.argv:
    if i + 1 < len(sys.argv):
        next_arg = sys.argv[i + 1]
        if arg == '-o':
            organization_name = next_arg 
            if empty(organization_name):
                alert("organization name is missing")
     
        if arg == '-u':
            user_name         = next_arg
            if empty(user_name):
                alert("user name is missing")
                
        if arg == '-d': 
            date_range        = next_arg
            if not re.search("\d{8}\-\d{8}", date_range):
                alert(
                    "date range is in incorrect format. " + 
                    "yyyyMMdd-yyyyMMdd required"
                )
            date_from, date_to = map(
                                     lambda d: datetime
                                                   .strptime(d, '%Y%m%d')
                                                   .date(),
                                     date_range.split('-')
                                  )
    i = i + 1
    
if organization_name == None:
    alert("you need to input organization '-o'")

if (date_to == None) or (date_from == None):
    date_to   = date.today()
    date_from = date_to - timedelta(days=14)

print("org_name: {}, user_name: {}, date_from: {}, date_to: {}".format(organization_name, user_name, date_from, date_to))    

def read_token():
    f = open(TOKEN_PATH, "r")
    content = f.read()
    f.close()
    print("token: {}".format(content))
    return content.strip()

## or using an access token
g            = Github(read_token())
print("trying to access {} ...".format(organization_name))
orgs         = g   .get_organization(organization_name)
members_list = orgs.get_members()
repos        = orgs.get_repos  (
                   type      = 'private',
                   direction = 'desc' 
               )

def paginated_list_to_list(pl):
    _list = []
    for x in pl:
        _list.append(x)
    return _list

def get_commits(repo, member, date_from, date_to):
    date_from = datetime.combine(date_from, datetime.min.time())
    date_to   = datetime.combine(date_to,   datetime.min.time())

    try:
        return paginated_list_to_list(
                   repo.get_commits(
                       author = member,
                       since  = date_from,
                       until  = date_to
                   )
               )
    except:
        return []

def Some(x):
    if x == None:
        return ""
    return x

if members_list == None:
    alert("Failed to retireve members")

members = []

if user_name != None:
    for member in members_list:
        if (user_name in Some(member.name))  or  \
           (user_name in Some(member.login)) or \
           (user_name in Some(member.email)):
           members.append(member)
else:
    for member in members_list:
        members.append(member)

#
# Then play with your Github objects:
#
for member in members:
    for repo in repos:
        commits = get_commits(repo, member, date_from, date_to)
        if len(commits) > 0:
            print("[{}] name: {} commits: {}, changes: {}"
                      .format(
                           member,
                           repo.name,
                           len(commits),
                           sum([x.stats.total for x in commits])
                       )
            )
